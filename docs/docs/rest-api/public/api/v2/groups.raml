###
# Get the root group
#
get:
  description:
    Get the root group with all applications and all transitive child groups.
  is: [ secured ]
  responses:
    200:
      description: The root group with all transitive dependencies.
      body:
        application/json:
          example: !include examples/group.json
          schema: Group

###
# Update the root group
#
put:
  description:
    Change parameters of a deployed application group.
    The new group parameters get applied.


    * Changes to application parameters will result in a restart of this application.

    * A new application added to the group is started.

    * An existing application removed from the group gets stopped.


    If there are no changes to the application definition, no restart is triggered.
    During restart marathon keeps track, that the configured amount of minimal running instances are _always_ available.

    This method alows 2 special modes for the update operation>

    * Provide only the `version` field in the group definition. This will rollback the group to that given version

    * Provide only the `scaleBy` field will scale all transitive applications by the given factor.

    A deployment can run forever. This is the case, when the new application has a problem and does not become healthy.
    In this case, human interaction is needed with 2 possible choices


    * Rollback to an existing older version

    * Update with a newer version of the group which does not have the problems of the old one.


    If there is an upgrade process already in progress, a new update will be rejected unless the force flag is set.
    With the force flag given, a running upgrade is terminated and a new one is started.

    Since the deployment of the group can take a considerable amount of time, this endpoint returns immediatly with a version.
    The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with
    the given version.
  is: [ secured ]
  body:
    application/json:
      example: !include examples/group.json
      schema: Group
  responses:
    200:
      description:
        A deployment is started which has a unique deployment identifier.
        The related deployment can be fetched from the /v2/deployments endpoint.
        If the deployement is gone from the list of deployments, than this means it is finished.
        As long as the deployment runs, the effect of that change operation is visible only partially.
      body:
        application/json:
          example: !include examples/deployments_result.json
    400:
      description: The group definition provided in the body is not valid.
      body:
        application/json:
          example: |
            {"message":"Invalid JSON","details":[{"path":"/id","errors":["error.expected.jsstring"]}]}
    409:
      description: There is an already deployed group with this name
      body:
        application/json:
          example: |
            {"message":"Group / is already created. Use PUT to change this group."}
    422:
      description: The entity send can not be preocessed, since there are validation errors
      body:
        application/json:
          example: |
            {
              "message":"Bean is not valid",
              "errors": [
                {
                  "attribute":"apps[0].id",
                  "error":"identifier /app is not child of /group. Hint: use relative paths."
                }
              ]
            }


###
# Create a new application group
#
post:
  description:
    Create and start a new application group.
    Application groups can contain other application groups.
  is: [ secured ]
  body:
    application/json:
      example: !include examples/group.json
      schema: Group
  responses:
    200:
      description:
        A deployment is started which has a unique deployment identifier.
        The related deployment can be fetched from the /v2/deployments endpoint.
        If the deployement is gone from the list of deployments, than this means it is finished.
        As long as the deployment runs, the effect of that change operation is visible only partially.
      body:
        application/json:
          example: !include examples/deployments_result.json
    400:
      description: The group definition provided in the body is not valid.
      body:
        application/json:
          example: |
            {"message":"Invalid JSON","details":[{"path":"/id","errors":["error.expected.jsstring"]}]}
    409:
      description: There is an already deployed group with this name
      body:
        application/json:
          example: |
            {"message":"Group / is already created. Use PUT to change this group."}
    422:
      description: The entity send can not be preocessed, since there are validation errors
      body:
        application/json:
          example: |
            {
              "message":"Bean is not valid",
              "errors": [
                {
                  "attribute":"apps[0].id",
                  "error":"identifier /app is not child of /group. Hint: use relative paths."
                }
              ]
            }


###
# Delete the root group
#
delete:
  description:
    Destroy a group. All data about that group and all associated applications will be deleted.
    The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with
    the given version.
  is: [ secured ]
  responses:
    200:
      description:
        A deployment is started which has a unique deployment identifier.
        The related deployment can be fetched from the /v2/deployments endpoint.
        If the deployement is gone from the list of deployments, than this means it is finished.
        As long as the deployment runs, the effect of that change operation is visible only partially.
      body:
        application/json:
          example: !include examples/deployments_result.json
    409:
      description:
        There is an already running deployment, that affects one application in that group.
        To override this deployment, use the force=true flag
      body:
        application/json:
          example: |
            {
             "message":"App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'.",
             "deployments":[{"id":"97c136bf-5a28-4821-9d94-480d9fbb01c8"}]
            }


/{group_id}:
  ###
  # Get the group with specific path
  #
  get:
    description:
      Get the group with the specified path with all applications and all transitive child groups.
    is: [ secured ]
    responses:
      200:
        description: The specified group with all transitive dependencies.
        body:
          application/json:
            example: !include examples/group.json
            schema: Group

  ###
  # Update the specified group
  #
  put:
    description:
      Change parameters of a deployed application group.
      The new group parameters get applied.


      * Changes to application parameters will result in a restart of this application.

      * A new application added to the group is started.

      * An existing application removed from the group gets stopped.


      If there are no changes to the application definition, no restart is triggered.
      During restart marathon keeps track, that the configured amount of minimal running instances are _always_ available.

      This method alows 2 special modes for the update operation>

      * Provide only the `version` field in the group definition. This will rollback the group to that given version

      * Provide only the `scaleBy` field will scale all transitive applications by the given factor.

      A deployment can run forever. This is the case, when the new application has a problem and does not become healthy.
      In this case, human interaction is needed with 2 possible choices


      * Rollback to an existing older version

      * Update with a newer version of the group which does not have the problems of the old one.


      If there is an upgrade process already in progress, a new update will be rejected unless the force flag is set.
      With the force flag given, a running upgrade is terminated and a new one is started.

      Since the deployment of the group can take a considerable amount of time, this endpoint returns immediatly with a version.
      The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with
      the given version.
    is: [ secured ]
    body:
      application/json:
        example: !include examples/group.json
        schema: Group
    responses:
      200:
        description:
          A deployment is started which has a unique deployment identifier.
          The related deployment can be fetched from the /v2/deployments endpoint.
          If the deployement is gone from the list of deployments, than this means it is finished.
          As long as the deployment runs, the effect of that change operation is visible only partially.
        body:
          application/json:
            example: !include examples/deployments_result.json
      400:
        description: The group definition provided in the body is not valid.
        body:
          application/json:
            example: |
              {"message":"Invalid JSON","details":[{"path":"/id","errors":["error.expected.jsstring"]}]}
      409:
        description: There is an already deployed group with this name
        body:
          application/json:
            example: |
              {"message":"Group / is already created. Use PUT to change this group."}
      422:
        description: The entity send can not be preocessed, since there are validation errors
        body:
          application/json:
            example: |
              {
                "message":"Bean is not valid",
                "errors": [
                  {
                    "attribute":"apps[0].id",
                    "error":"identifier /app is not child of /group. Hint: use relative paths."
                  }
                ]
              }


  ###
  # Create a new application group
  #
  post:
    description:
      Create and start a new application group.
      Application groups can contain other application groups.
    is: [ secured ]
    body:
      application/json:
        example: !include examples/group.json
        schema: Group
    responses:
      200:
        description:
          A deployment is started which has a unique deployment identifier.
          The related deployment can be fetched from the /v2/deployments endpoint.
          If the deployement is gone from the list of deployments, than this means it is finished.
          As long as the deployment runs, the effect of that change operation is visible only partially.
        body:
          application/json:
            example: !include examples/deployments_result.json
      400:
        description: The group definition provided in the body is not valid.
        body:
          application/json:
            example: |
              {"message":"Invalid JSON","details":[{"path":"/id","errors":["error.expected.jsstring"]}]}
      409:
        description: There is an already deployed group with this name
        body:
          application/json:
            example: |
              {"message":"Group / is already created. Use PUT to change this group."}
      422:
        description: The entity send can not be preocessed, since there are validation errors
        body:
          application/json:
            example: |
              {
                "message":"Bean is not valid",
                "errors": [
                  {
                    "attribute":"apps[0].id",
                    "error":"identifier /app is not child of /group. Hint: use relative paths."
                  }
                ]
              }

  ###
  # Delete the specified group
  #
  delete:
    description:
      Destroy a group. All data about that group and all associated applications will be deleted.
      The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with
      the given version.
    is: [ secured ]
    responses:
      200:
        description:
          A deployment is started which has a unique deployment identifier.
          The related deployment can be fetched from the /v2/deployments endpoint.
          If the deployement is gone from the list of deployments, than this means it is finished.
          As long as the deployment runs, the effect of that change operation is visible only partially.
        body:
          application/json:
            example: !include examples/deployments_result.json
      409:
        description:
          There is an already running deployment, that affects one application in that group.
          To override this deployment, use the force=true flag
        body:
          application/json:
            example: |
              {
               "message":"App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'.",
               "deployments":[{"id":"97c136bf-5a28-4821-9d94-480d9fbb01c8"}]
              }


  /versions:
    ###
    # List the versions of the group with specific path
    #
    get:
      description:
        List all versions the group with the specified path.
      is: [ secured ]
      responses:
        200:
          description: List all available versions of that group.
          body:
            application/json:
              example: |
                [ "2015-09-25T15:13:48.343Z", "2015-09-11T11:11:22.692Z", "2015-09-11T10:47:21.241Z" ]

